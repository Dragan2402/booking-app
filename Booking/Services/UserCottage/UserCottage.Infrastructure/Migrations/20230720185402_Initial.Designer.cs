// <auto-generated />
using System;
using Booking.Services.UserCottage.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace UserCottage.Infrastructure.Migrations
{
    [DbContext(typeof(UserCottageContext))]
    [Migration("20230720185402_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Booking.Services.UserCottage.Domain.Cottage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Cottages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e10d5fc-600d-49ff-8d1c-ca15872af896"),
                            AddressId = new Guid("f96e8120-3d51-44fc-9620-d842c6402faf"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sunshine Bebe",
                            OwnerId = new Guid("fdb5d61d-f6b9-4b0f-8869-4a9bebeb128a"),
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("7397fd64-0d58-4322-a743-a81f77c64fd8"),
                            AddressId = new Guid("d4268f91-5bc6-45e4-8246-d7fe59ded27a"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Funny Resort",
                            OwnerId = new Guid("fdb5d61d-f6b9-4b0f-8869-4a9bebeb128a"),
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("98adc6d2-4b27-486f-9520-9ceda899168c"),
                            AddressId = new Guid("ded20aca-37a5-49be-ad10-2a86e4057486"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "QSX Mansion",
                            OwnerId = new Guid("a1829896-9b2a-4e4f-b732-0b2414547802"),
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Booking.Services.UserCottage.Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("17197b81-dd09-487c-b314-dbb879198cbf"),
                            City = "Brcko",
                            Country = "BiH",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8725), new TimeSpan(0, 2, 0, 0, 0)),
                            PostalCode = "76100",
                            State = "Brcko Distrikt",
                            Street = "Pavla Savica 42",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8778), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f96e8120-3d51-44fc-9620-d842c6402faf"),
                            City = "Novi Sad",
                            Country = "Srbija",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8788), new TimeSpan(0, 2, 0, 0, 0)),
                            PostalCode = "21000",
                            State = "Vojvodina",
                            Street = "Svetojovanska 11",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8792), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("89772a55-fc5b-4c79-b24c-22c307c4b78f"),
                            City = "Novi Sad",
                            Country = "Srbija",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8796), new TimeSpan(0, 2, 0, 0, 0)),
                            PostalCode = "21000",
                            State = "Vojvodina",
                            Street = "Palicka 13",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8798), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("87ed11ca-6344-41fe-a8e7-0fcdd455da80"),
                            City = "Novi Sad",
                            Country = "Srbija",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8804), new TimeSpan(0, 2, 0, 0, 0)),
                            PostalCode = "21000",
                            State = "Vojvodina",
                            Street = "Pavloviceva 11",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8806), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("a84c15ab-a67c-4447-a30d-0b0d4e10fbc8"),
                            City = "Novi Sad",
                            Country = "Srbija",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8811), new TimeSpan(0, 2, 0, 0, 0)),
                            PostalCode = "21000",
                            State = "Vojvodina",
                            Street = "Futoski put bb",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8813), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("d4268f91-5bc6-45e4-8246-d7fe59ded27a"),
                            City = "Novi Sad",
                            Country = "Srbija",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8819), new TimeSpan(0, 2, 0, 0, 0)),
                            PostalCode = "21000",
                            State = "Vojvodina",
                            Street = "Fruska Gora 2121",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8822), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("ded20aca-37a5-49be-ad10-2a86e4057486"),
                            City = "Novi Sad",
                            Country = "Srbija",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8826), new TimeSpan(0, 2, 0, 0, 0)),
                            PostalCode = "21000",
                            State = "Vojvodina",
                            Street = "Jovana Popovica 51",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 221, DateTimeKind.Unspecified).AddTicks(8828), new TimeSpan(0, 2, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Booking.Services.UserCottage.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e10d5fc-600d-49ff-8d1c-ca15872af496"),
                            AddressId = new Guid("17197b81-dd09-487c-b314-dbb879198cbf"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1172), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Jovan",
                            IdentityId = new Guid("233275cd-158e-442c-90c1-3bc3495563c6"),
                            LastName = "Jovic",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1189), new TimeSpan(0, 2, 0, 0, 0)),
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("59249fab-eec0-435c-9df9-5aba2c082f39"),
                            AddressId = new Guid("89772a55-fc5b-4c79-b24c-22c307c4b78f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1195), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Pero",
                            IdentityId = new Guid("a669b80b-1031-4ef4-985c-112fb99e9cee"),
                            LastName = "Peric",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1198), new TimeSpan(0, 2, 0, 0, 0)),
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("fdb5d61d-f6b9-4b0f-8869-4a9bebeb128a"),
                            AddressId = new Guid("87ed11ca-6344-41fe-a8e7-0fcdd455da80"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1204), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Gazda",
                            IdentityId = new Guid("af8fe996-588b-4056-97f4-9206d56e3fbe"),
                            LastName = "Gazdic",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1206), new TimeSpan(0, 2, 0, 0, 0)),
                            UserType = 1
                        },
                        new
                        {
                            Id = new Guid("a1829896-9b2a-4e4f-b732-0b2414547802"),
                            AddressId = new Guid("a84c15ab-a67c-4447-a30d-0b0d4e10fbc8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1213), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Andrej",
                            IdentityId = new Guid("e91a2f4a-4783-46e8-be53-c9b631e2a8f8"),
                            LastName = "Culjak",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 7, 20, 20, 54, 2, 222, DateTimeKind.Unspecified).AddTicks(1216), new TimeSpan(0, 2, 0, 0, 0)),
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Booking.Services.UserCottage.Domain.Cottage", b =>
                {
                    b.HasOne("Booking.Services.UserCottage.Domain.Models.Address", "Address")
                        .WithOne("Cottage")
                        .HasForeignKey("Booking.Services.UserCottage.Domain.Cottage", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Services.UserCottage.Domain.User", "Owner")
                        .WithMany("Cottages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Booking.Services.UserCottage.Domain.User", b =>
                {
                    b.HasOne("Booking.Services.UserCottage.Domain.Models.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("Booking.Services.UserCottage.Domain.User", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Booking.Services.UserCottage.Domain.Models.Address", b =>
                {
                    b.Navigation("Cottage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booking.Services.UserCottage.Domain.User", b =>
                {
                    b.Navigation("Cottages");
                });
#pragma warning restore 612, 618
        }
    }
}
